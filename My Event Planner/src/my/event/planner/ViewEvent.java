/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.event.planner;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class ViewEvent extends javax.swing.JFrame {

    

    /**
     * Creates new form SeeSchedule
     */
    public ViewEvent() {
        System.out.println(getSecondWord("1. habibi"));
        initComponents();
        fillCombo();
        showTable("EventID");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        photographer = new javax.swing.JComboBox<>();
        decorator = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        ty = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        customer = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        th = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        musician = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        menu = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Event ID", "Event Name", "Date", "Type", "Theme", "Customer", "Guest Number", "Menu", "Menu Description", "Photographer", "Decorator", "Musician"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setForeground(new java.awt.Color(255, 204, 153));
        jButton1.setText("Show All Events");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(255, 204, 153));
        jButton2.setText("Filter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Event Name");

        jLabel2.setText("Date");

        jLabel3.setText("Photographer");

        jLabel4.setText("Decorator");

        photographer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        decorator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jButton3.setForeground(new java.awt.Color(255, 204, 153));
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Sort by:");

        jLabel6.setText("View Events");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EventID", "EventName", "Date", "Custome.Name", "GuestNumber", "Menu.Cuisine", "Photographer.Name", "Decorator.Name", "Musician.Name" }));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "This Week", "Upcoming Events" }));

        jButton4.setText("Sort");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel9.setText("Event Type");

        ty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jLabel10.setText("Customer");

        customer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jLabel12.setText("Theme");

        th.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jLabel8.setText("Musician");

        musician.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        jLabel11.setText("Cuisine");

        menu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(434, 434, 434)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(8, 8, 8)
                                            .addComponent(jLabel1))
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton3)
                                                .addGap(135, 135, 135)
                                                .addComponent(jLabel2))
                                            .addComponent(jLabel8))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel10))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(photographer, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel9))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(musician, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(decorator, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel12)))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ty, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(th, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(115, 115, 115)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 987, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton3)
                                .addGap(3, 3, 3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel1)
                                .addGap(17, 17, 17)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(photographer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(ty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(decorator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(th, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(musician, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton4)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void fillCombo(){
        //public Connection connection;
        PreparedStatement pst;
        ResultSet rs;
        try{
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            System.out.println("Hey");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MyEventPlanner;selectMethod=cursor", "sa", "123456");
            pst= connection.prepareStatement("select * from Photographer");
            rs= pst.executeQuery();
            
            while(rs.next()){
            
            String name= rs.getString("Name");
            int price= rs.getInt("Price");
            int exp=rs.getInt("Experience");
            int id= rs.getInt("Photographer_ID");
            photographer.addItem(id+". "+name+" - "+exp + " years"+ " - "+price + " tk");
            
            
//            PhotoTemp photo1= new PhotoTemp(id, name, price, exp);
//            //PhotoTemp photo1= new PhotoTemp();
//            photo1.setID(id);
//            photo1.setName(name);
//            photo1.setExperience(exp);
//            photo1.setPrice(price);
//            p.add(id, photo1);
            
            
            }
            
            
            
            
            pst= connection.prepareStatement("select * from Musician");
            rs= pst.executeQuery();
            
            while(rs.next()){
            int id= rs.getInt("Musician_ID");
            String name= rs.getString("Name");
            String price= rs.getString("Price");
            musician.addItem(id+". "+name+" - "+price + " tk");
                     
            }
            
            
            pst= connection.prepareStatement("select * from Decorator");
            rs= pst.executeQuery();
            
            while(rs.next()){
            int id= rs.getInt("Decorator_ID");
            String name= rs.getString("Name");
            String price= rs.getString("Price");
            decorator.addItem(id+". "+name+" - "+price + " tk");
                     
            }
            
            
            pst= connection.prepareStatement("select * from Customer");
            rs= pst.executeQuery();
            
            while(rs.next()){
            String name= rs.getString("Name");
            String address= rs.getString("Address");
            int id= rs.getInt("Cus_ID");
            customer.addItem(id+". "+name + " - " +address);
                     
            }
            
            
            
            pst= connection.prepareStatement("select * from Type");
            rs= pst.executeQuery();
            
            while(rs.next()){
            String name= rs.getString("TypeName");
            //String address= rs.getString("Address");
            int id= rs.getInt("TypeID");
            ty.addItem(id+". "+name);
                     
            }
            
            
            pst= connection.prepareStatement("select * from Menu");
            rs= pst.executeQuery();
            
            while(rs.next()){
            int id= rs.getInt("MenuID");
            int price= rs.getInt("Price");
            String name= rs.getString("Cuisine");
            //String address= rs.getString("Address");
            //int id= rs.getInt("Cus_ID");
            menu.addItem(id+". "+name+" - "+ price+ " tk");
                     
            }
            
            pst= connection.prepareStatement("select * from Theme");
            rs= pst.executeQuery();
            
            while(rs.next()){
            int id= rs.getInt("ThemeID");
            int price= rs.getInt("Price");
            String name= rs.getString("ThemeName");
            String color= rs.getString("Color");
            //String address= rs.getString("Address");
            //int id= rs.getInt("Cus_ID");
            th.addItem(id+". "+name+" - "+ color + " - " + price+ " tk");
                     
            }
            
        }catch(Exception e){
        
        }
    }
    
    public void showTable(String sort)
    {
        PreparedStatement pst;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MyEventPlanner;selectMethod=cursor", "sa", "123456");
            pst = connection.prepareStatement("SELECT E.EventID, E.EventName, Date, C.Name, C.Phone, C.Address, TY.TypeName,TH.ThemeName, GuestNumber, MEN.Cuisine, E.Description,\n" +
"MEN.Price, P.Name, P.Price, D.Name, D.Price, MUS.Name, MUS.Price\n" +
"FROM Event as E\n" +
"JOIN Customer C ON C.Cus_ID = E.CustomerID\n" +
"FULL  JOIN Photographer P ON P.Photographer_ID = E.PhotographerID\n" +
"JOIN Decorator D ON D.Decorator_ID = E.DecoratorID\n" +
"FULL  JOIN Musician MUS ON MUS.Musician_ID = E.MusicianID\n" +
"JOIN Theme TH ON TH.ThemeID = E.ThemeID\n" +
"JOIN Type TY ON TY.TypeID = E.TypeID\n" +
"JOIN Menu MEN ON MEN.MenuID = E.MenuID\n" +
"ORDER BY "+sort);
            //ResultSet rs = pst.executeQuery();
             ResultSet rs = pst.executeQuery();
             ResultSetMetaData RSM = rs.getMetaData();
             
             int c;
             c = 10;
             DefaultTableModel DF = (DefaultTableModel)jTable1.getModel();
             DF.setRowCount(0);
             
             while(rs.next())
             {
                 Vector v2 = new Vector();
             for(int i = 1; i<=c; i++)
             {
                 v2.add(rs.getString("EventID"));
                 v2.add(rs.getString("EventName"));
                 v2.add(rs.getString("Date"));
                 v2.add(rs.getString("TypeName"));
                 v2.add(rs.getString("ThemeName"));
                 v2.add(rs.getString("Name")+ " - "+ rs.getString("Phone") +" - "+rs.getString("Address"));
                 //v2.add(rs.getString("Phone"));
                 //v2.add(rs.getString("Address"));
                 v2.add(rs.getString("GuestNumber"));
                 v2.add(rs.getString("Cuisine")+ " - "+ rs.getString("Price"));
                 v2.add(rs.getString("Description"));
                 v2.add(rs.getString(13)+ " - "+ rs.getString(14));
                 v2.add(rs.getString(15)+ " - "+ rs.getString(16));
                 v2.add(rs.getString(17)+ " - "+ rs.getString(18));
                 
                 
             }
             DF.addRow(v2);
             }
             
        } catch (Exception ex) {
            //Logger.getLogger(BookCrud.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }   
    }
    public void showTable2(String sort)
    {
        PreparedStatement pst;
        SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
        String date;
        if(jDateChooser1.getDate()!=null)
        date = sdf.format(jDateChooser1.getDate());
        else date= "";
        if(date.isEmpty()) date="";
        String eventName= jTextField1.getText();
        if(eventName.isEmpty()) eventName="";
        String photo=getSecondWord(photographer.getSelectedItem().toString());
        if(photo.equals("All")) photo="";
        String deco=getSecondWord(decorator.getSelectedItem().toString());
        if(deco.equals("All")) deco="";
        String type=getSecondWord(ty.getSelectedItem().toString());
        if(type.equals("All")) type="";
        String theme=getSecondWord(th.getSelectedItem().toString());
        System.out.println(type+" hagu");
        if(theme.equals("All")) theme="";
        String menu=getSecondWord(this.menu.getSelectedItem().toString());
        if(menu.equals("All")) menu="";
        String music=getSecondWord(musician.getSelectedItem().toString());
        if(music.equals("All")) music="";
        String cus=getSecondWord(customer.getSelectedItem().toString());
        if(cus.equals("All")) cus="";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager.getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=MyEventPlanner;selectMethod=cursor", "sa", "123456");
            pst = connection.prepareStatement("SELECT E.EventID, E.EventName, Date, C.Name, C.Phone, C.Address, TY.TypeName, TH.ThemeName, GuestNumber, MEN.Cuisine, E.Description,\n" +
"MEN.Price, P.Name, P.Price, D.Name, D.Price, MUS.Name, MUS.Price\n" +
"FROM Event as E\n" +
"JOIN Customer C ON C.Cus_ID = E.CustomerID\n" +
"Full JOIN Photographer P ON P.Photographer_ID = E.PhotographerID\n" +
"JOIN Decorator D ON D.Decorator_ID = E.DecoratorID\n" +
"Full JOIN Musician MUS ON MUS.Musician_ID = E.MusicianID\n" +
"JOIN Theme TH ON TH.ThemeID = E.ThemeID\n" +
"JOIN Type TY ON TY.TypeID = E.TypeID\n" +
"JOIN Menu MEN ON MEN.MenuID = E.MenuID\n" +
"WHERE DATE LIKE '%"+date+"%' AND EventName LIKE '%"+eventName+"%' AND P.Name LIKE '%"+photo+"%' AND D.Name LIKE '%"+deco+"%' AND MUS.Name LIKE '%"+music+"%'\n" +
"AND C.NAME LIKE '%"+cus+"%' AND TY.TypeName LIKE '%"+type+"%' AND  TH.ThemeName LIKE '%"+theme+"%' AND MEN.Cuisine LIKE '%"+menu+"%'\n" +
"ORDER BY "+ sort);
            //ResultSet rs = pst.executeQuery();
             ResultSet rs = pst.executeQuery();
             ResultSetMetaData RSM = rs.getMetaData();
             
             int c;
             c = 10;
             DefaultTableModel DF = (DefaultTableModel)jTable1.getModel();
             DF.setRowCount(0);
             
             while(rs.next())
             {
                 Vector v2 = new Vector();
             for(int i = 1; i<=c; i++)
             {
                 v2.add(rs.getString("EventID"));
                 v2.add(rs.getString("EventName"));
                 v2.add(rs.getString("Date"));
                 v2.add(rs.getString("TypeName"));
                 v2.add(rs.getString("ThemeName"));
                 v2.add(rs.getString("Name")+ " - "+ rs.getString("Phone") +" - "+rs.getString("Address"));
                 //v2.add(rs.getString("Phone"));
                 //v2.add(rs.getString("Address"));
                 v2.add(rs.getString("GuestNumber"));
                 v2.add(rs.getString("Cuisine")+ " - "+ rs.getString("Price"));
                 v2.add(rs.getString("Description"));
                 v2.add(rs.getString(13)+ " - "+ rs.getString(14));
                 v2.add(rs.getString(15)+ " - "+ rs.getString(16));
                 v2.add(rs.getString(17)+ " - "+ rs.getString(18));
                 
                 
             }
             DF.addRow(v2);
             }
             
        } catch (Exception ex) {
            //Logger.getLogger(BookCrud.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }   
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          showTable("EventID");
          fillCombo();
//        ConnectMSSQL cnObj= new ConnectMSSQL();
//        try {
//            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
//            Connection connection = DriverManager.getConnection(
//                    "jdbc:sqlserver://localhost:1433;databaseName=DR;selectMethod=cursor", "sa", "123456");       
//            
//            Statement statement = connection.createStatement();
////            gotResults = statement.execute(date);
////            ResultSet resultSet=null;
////            if(!gotResults){
////             System.out.println("No results returned");
////             } else {
////                resultSet = statement.getResultSet();
////             }
//            
//            ResultSet resultSet=statement.executeQuery("select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme from event");
//            jTable1.setModel(DbUtils.resultSetToTableModel(resultSet));
////            while (resultSet.next()) {
////                
////                System.out.println("Customer NAME:" + 
////                        resultSet.getString("FirstName"));
////                
////            }
//            
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        JOptionPane.showMessageDialog(this, "Event Showed");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                                       
        showTable2(jComboBox3.getSelectedItem().toString());
        JOptionPane.showMessageDialog(this, "Event Filtered");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new Events().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
                                                 
        
        try {
          String sort= jComboBox3.getSelectedItem().toString();
          showTable2(sort);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Event Sorted");
    }//GEN-LAST:event_jButton4ActionPerformed
    public String searchFilter(){
        String searchEventName, searchPriority, searchCategory;
        //Date searchDate;
        SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
        String date;
        
        if(jDateChooser1.getDate()!=null)
        date = sdf.format(jDateChooser1.getDate());
        else date= "9999-12-31";
        String sql;
        if(jTextField1.getText().isEmpty() && photographer.getSelectedItem().toString().equals("All") && decorator.getSelectedItem().toString().equals("All") && date==null && jComboBox3.getSelectedItem().toString().equals("All")&& jComboBox4.getSelectedItem().toString().equals("All")){
            
            sql="select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme, Salah, Study from Event FULL OUTER JOIN Progress ON Event.DayID=Progress.DayID";
            return sql;
        }else{
            searchEventName=jTextField1.getText();
            searchPriority=decorator.getSelectedItem().toString();
            
            if(searchPriority.equals("All")) searchPriority="";
            searchCategory=photographer.getSelectedItem().toString();
            if(searchCategory.equals("All")) searchCategory="";
            System.out.println(searchCategory+" "+searchPriority+ " "+ date);
            if(date=="9999-12-31")
                sql="select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme from Event where EventName like '%"+searchEventName+"%' and Priority like '%"+searchPriority+"%' and EventCategory like '%"+searchCategory+"%'";
                //sql="select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme, Salah, Study from Event FULL OUTER JOIN Progress ON Event.DayID=Progress.DayID where EventName like '%"+searchEventName+"%' and Priority like '%"+searchPriority+"%' and Salah > '%"+salah+"%' and study > '%"+study+"%' and EventCategory like '%"+searchCategory+"%'";    
            else
                sql="select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme from Event where EventName like '%"+searchEventName+"%' and Priority like '%"+searchPriority+"%'and EventDate = '"+date+"'  and EventCategory like '%"+searchCategory+"%'";
                //sql="select EventDate, EventName, EventCategory, Priority, StartTime, EndTIme, Salah, Study from Event FULL OUTER JOIN Progress ON Event.DayID=Progress.DayID where EventName, Salah, Study from Event FULL OUTER JOIN Progress ON Event.DayID=Progress.DayID like '%"+searchEventName+"%' and Priority like '%"+searchPriority+"%' and Salah > '%"+salah+"%' and study > '%"+study+"%' and EventDate = '"+date+"'  and EventCategory like '%"+searchCategory+"%'";
            return sql;
        }
    
    }   
    
    /**
     * @param args the command line arguments
     */
    private String getSecondWord(String text) {

        int index = text.indexOf(' ');

        if (index > -1) { // Check if there is more than one word.

//            return text.substring(0, index).trim();
              return text.split(" ")[1];// Extract first word.

        } else {

            return text; // Text is the first word itself.
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewEvent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> customer;
    private javax.swing.JComboBox<String> decorator;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> menu;
    private javax.swing.JComboBox<String> musician;
    private javax.swing.JComboBox<String> photographer;
    private javax.swing.JComboBox<String> th;
    private javax.swing.JComboBox<String> ty;
    // End of variables declaration//GEN-END:variables
}
